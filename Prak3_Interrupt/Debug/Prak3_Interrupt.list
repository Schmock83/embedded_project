
Prak3_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000700  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008a8  080008b0  000108b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008a8  080008a8  000108b0  2**0
                  CONTENTS
  4 .ARM          00000000  080008a8  080008a8  000108b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a8  080008b0  000108b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008ac  080008ac  000108ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080008b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080008b0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000108b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000899  00000000  00000000  000108e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000204  00000000  00000000  00011179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001466  00000000  00000000  000114c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c98  00000000  00000000  0001292e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000051b5  00000000  00000000  000135c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001877b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000218  00000000  00000000  000187d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000890 	.word	0x08000890

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000890 	.word	0x08000890

080001e8 <GPIO_PeriClockControl>:
 */

#include "GPIO_Driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:

// Implementieren Sie die weiteren Schritte. Denken Sie daran die Einträge eines Registers zurückzusetzen, bevor Sie einzelne Bits setzen!
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	 //Anschalten der Clock
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff0e 	bl	80001e8 <GPIO_PeriClockControl>

	 //Konfigurieren des PIN in INPUT oder OUTPUT-Modus
	 if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d810      	bhi.n	80003f6 <GPIO_Init+0x3e>
	 {
		// Implementieren Sie die Funktionalität
		//pGPIOHandle->pGPIOx->MODE_REG = RESET;
		pGPIOHandle->pGPIOx->MODE_REG |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2));
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	795b      	ldrb	r3, [r3, #5]
 80003de:	4619      	mov	r1, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	4619      	mov	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	e0b9      	b.n	800056a <GPIO_Init+0x1b2>
	 
	 else
	 { 
	    // IRQ-Modus (Muss erst im dritten Praktikum bearbeitet werden)
		// 1. Konfiguration für Trigger auf fallenende, steigende oder beide Flanken
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	795b      	ldrb	r3, [r3, #5]
 80003fa:	2b04      	cmp	r3, #4
 80003fc:	d117      	bne.n	800042e <GPIO_Init+0x76>
			EXTI->RTSR &= ~(ENABLE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003fe:	4b73      	ldr	r3, [pc, #460]	; (80005cc <GPIO_Init+0x214>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7912      	ldrb	r2, [r2, #4]
 8000406:	4611      	mov	r1, r2
 8000408:	2201      	movs	r2, #1
 800040a:	408a      	lsls	r2, r1
 800040c:	43d2      	mvns	r2, r2
 800040e:	4611      	mov	r1, r2
 8000410:	4a6e      	ldr	r2, [pc, #440]	; (80005cc <GPIO_Init+0x214>)
 8000412:	400b      	ands	r3, r1
 8000414:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (ENABLE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000416:	4b6d      	ldr	r3, [pc, #436]	; (80005cc <GPIO_Init+0x214>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	7912      	ldrb	r2, [r2, #4]
 800041e:	4611      	mov	r1, r2
 8000420:	2201      	movs	r2, #1
 8000422:	408a      	lsls	r2, r1
 8000424:	4611      	mov	r1, r2
 8000426:	4a69      	ldr	r2, [pc, #420]	; (80005cc <GPIO_Init+0x214>)
 8000428:	430b      	orrs	r3, r1
 800042a:	60d3      	str	r3, [r2, #12]
 800042c:	e035      	b.n	800049a <GPIO_Init+0xe2>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	795b      	ldrb	r3, [r3, #5]
 8000432:	2b05      	cmp	r3, #5
 8000434:	d117      	bne.n	8000466 <GPIO_Init+0xae>
			EXTI->FTSR &= ~(ENABLE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000436:	4b65      	ldr	r3, [pc, #404]	; (80005cc <GPIO_Init+0x214>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a60      	ldr	r2, [pc, #384]	; (80005cc <GPIO_Init+0x214>)
 800044a:	400b      	ands	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (ENABLE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044e:	4b5f      	ldr	r3, [pc, #380]	; (80005cc <GPIO_Init+0x214>)
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	7912      	ldrb	r2, [r2, #4]
 8000456:	4611      	mov	r1, r2
 8000458:	2201      	movs	r2, #1
 800045a:	408a      	lsls	r2, r1
 800045c:	4611      	mov	r1, r2
 800045e:	4a5b      	ldr	r2, [pc, #364]	; (80005cc <GPIO_Init+0x214>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6093      	str	r3, [r2, #8]
 8000464:	e019      	b.n	800049a <GPIO_Init+0xe2>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	2b06      	cmp	r3, #6
 800046c:	d115      	bne.n	800049a <GPIO_Init+0xe2>
			EXTI->RTSR |= (ENABLE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046e:	4b57      	ldr	r3, [pc, #348]	; (80005cc <GPIO_Init+0x214>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	4611      	mov	r1, r2
 800047e:	4a53      	ldr	r2, [pc, #332]	; (80005cc <GPIO_Init+0x214>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (ENABLE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000484:	4b51      	ldr	r3, [pc, #324]	; (80005cc <GPIO_Init+0x214>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	7912      	ldrb	r2, [r2, #4]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	4611      	mov	r1, r2
 8000494:	4a4d      	ldr	r2, [pc, #308]	; (80005cc <GPIO_Init+0x214>)
 8000496:	430b      	orrs	r3, r1
 8000498:	60d3      	str	r3, [r2, #12]
		}

		//2. Konfiguration des entsprechenden GPIO-Ports in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 800049a:	4b4d      	ldr	r3, [pc, #308]	; (80005d0 <GPIO_Init+0x218>)
 800049c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800049e:	4a4c      	ldr	r2, [pc, #304]	; (80005d0 <GPIO_Init+0x218>)
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a4:	6453      	str	r3, [r2, #68]	; 0x44
		uint16_t extiCR_Number = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	81fb      	strh	r3, [r7, #14]
		SYSCFG->EXTICR[extiCR_Number] |= (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx) << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4)*4));
 80004b0:	4a48      	ldr	r2, [pc, #288]	; (80005d4 <GPIO_Init+0x21c>)
 80004b2:	89fb      	ldrh	r3, [r7, #14]
 80004b4:	3302      	adds	r3, #2
 80004b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4946      	ldr	r1, [pc, #280]	; (80005d8 <GPIO_Init+0x220>)
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d039      	beq.n	8000538 <GPIO_Init+0x180>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4944      	ldr	r1, [pc, #272]	; (80005dc <GPIO_Init+0x224>)
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d032      	beq.n	8000534 <GPIO_Init+0x17c>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4943      	ldr	r1, [pc, #268]	; (80005e0 <GPIO_Init+0x228>)
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d02b      	beq.n	8000530 <GPIO_Init+0x178>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4941      	ldr	r1, [pc, #260]	; (80005e4 <GPIO_Init+0x22c>)
 80004de:	428b      	cmp	r3, r1
 80004e0:	d024      	beq.n	800052c <GPIO_Init+0x174>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4940      	ldr	r1, [pc, #256]	; (80005e8 <GPIO_Init+0x230>)
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d01d      	beq.n	8000528 <GPIO_Init+0x170>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	493e      	ldr	r1, [pc, #248]	; (80005ec <GPIO_Init+0x234>)
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d016      	beq.n	8000524 <GPIO_Init+0x16c>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	493d      	ldr	r1, [pc, #244]	; (80005f0 <GPIO_Init+0x238>)
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d00f      	beq.n	8000520 <GPIO_Init+0x168>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	493b      	ldr	r1, [pc, #236]	; (80005f4 <GPIO_Init+0x23c>)
 8000506:	428b      	cmp	r3, r1
 8000508:	d008      	beq.n	800051c <GPIO_Init+0x164>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	493a      	ldr	r1, [pc, #232]	; (80005f8 <GPIO_Init+0x240>)
 8000510:	428b      	cmp	r3, r1
 8000512:	d101      	bne.n	8000518 <GPIO_Init+0x160>
 8000514:	2308      	movs	r3, #8
 8000516:	e010      	b.n	800053a <GPIO_Init+0x182>
 8000518:	2300      	movs	r3, #0
 800051a:	e00e      	b.n	800053a <GPIO_Init+0x182>
 800051c:	2307      	movs	r3, #7
 800051e:	e00c      	b.n	800053a <GPIO_Init+0x182>
 8000520:	2306      	movs	r3, #6
 8000522:	e00a      	b.n	800053a <GPIO_Init+0x182>
 8000524:	2305      	movs	r3, #5
 8000526:	e008      	b.n	800053a <GPIO_Init+0x182>
 8000528:	2304      	movs	r3, #4
 800052a:	e006      	b.n	800053a <GPIO_Init+0x182>
 800052c:	2303      	movs	r3, #3
 800052e:	e004      	b.n	800053a <GPIO_Init+0x182>
 8000530:	2302      	movs	r3, #2
 8000532:	e002      	b.n	800053a <GPIO_Init+0x182>
 8000534:	2301      	movs	r3, #1
 8000536:	e000      	b.n	800053a <GPIO_Init+0x182>
 8000538:	2300      	movs	r3, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	7909      	ldrb	r1, [r1, #4]
 800053e:	f001 0103 	and.w	r1, r1, #3
 8000542:	0089      	lsls	r1, r1, #2
 8000544:	408b      	lsls	r3, r1
 8000546:	4618      	mov	r0, r3
 8000548:	4922      	ldr	r1, [pc, #136]	; (80005d4 <GPIO_Init+0x21c>)
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	4302      	orrs	r2, r0
 800054e:	3302      	adds	r3, #2
 8000550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3  Aktivieren des EXTI Interrupts handling in IMR-Register
		EXTI->IMR |= (SET << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <GPIO_Init+0x214>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <GPIO_Init+0x214>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6013      	str	r3, [r2, #0]
	 
	// ####################################### ENDE IRQ #####################################################################
	
	 //Konfigurieren des Output-Speeds
	 //pGPIOHandle->pGPIOx->OUTPUT_SPEED = RESET;
	 pGPIOHandle->pGPIOx->OUTPUT_SPEED |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	4619      	mov	r1, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	4619      	mov	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	430a      	orrs	r2, r1
 8000586:	609a      	str	r2, [r3, #8]
	 
	 //Konfigurieren des Pull-up/down Settings
	 //pGPIOHandle->pGPIOx->PULL_UP_DOWN = RESET;
	 pGPIOHandle->pGPIOx->PULL_UP_DOWN |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68da      	ldr	r2, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	79db      	ldrb	r3, [r3, #7]
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	4619      	mov	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	60da      	str	r2, [r3, #12]
	 
	 //Konfigurieren des Output modus
	 //pGPIOHandle->pGPIOx->OUTPUT_TYPE = RESET;
	 pGPIOHandle->pGPIOx->OUTPUT_TYPE |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	685a      	ldr	r2, [r3, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7a1b      	ldrb	r3, [r3, #8]
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	430a      	orrs	r2, r1
 80005c2:	605a      	str	r2, [r3, #4]
	 
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40013c00 	.word	0x40013c00
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40013800 	.word	0x40013800
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40020400 	.word	0x40020400
 80005e0:	40020800 	.word	0x40020800
 80005e4:	40020c00 	.word	0x40020c00
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40021400 	.word	0x40021400
 80005f0:	40021800 	.word	0x40021800
 80005f4:	40021c00 	.word	0x40021c00
 80005f8:	40022000 	.word	0x40022000

080005fc <GPIO_WriteToOutputPin>:
	// Implementieren Sie die Funktionalität
	return (uint16_t)pGPIOx->INPUT_DATA_REG;
}

void GPIO_WriteToOutputPin(GPIO_Handle_t *pGPIO_Handle, uint8_t Value)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	// Implementieren Sie die Funktionalität

	if(Value == SET){
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d109      	bne.n	8000622 <GPIO_WriteToOutputPin+0x26>
		//BSSR benutzen um atomares bit zu setzen
		pGPIO_Handle->pGPIOx->BIT_SET_RESET_REG = (SET << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	461a      	mov	r2, r3
 8000614:	2301      	movs	r3, #1
 8000616:	fa03 f202 	lsl.w	r2, r3, r2
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	619a      	str	r2, [r3, #24]
	}else{
		//BSSR benutzen um atomares bit zu resetten (pinNumber + 16bits)
		pGPIO_Handle->pGPIOx->BIT_SET_RESET_REG = (SET << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8000620:	e007      	b.n	8000632 <GPIO_WriteToOutputPin+0x36>
		pGPIO_Handle->pGPIOx->BIT_SET_RESET_REG = (SET << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber + 16));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	3310      	adds	r3, #16
 8000628:	2201      	movs	r2, #1
 800062a:	409a      	lsls	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	619a      	str	r2, [r3, #24]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <GPIO_ToggleOutputPin>:
	pGPIOx->OUTPUT_DATA_REG = Value;
}


void GPIO_ToggleOutputPin(GPIO_Handle_t *pGPIO_Handle)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	// Implementieren Sie die Funktionalität
	pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG ^= (SET << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	4619      	mov	r1, r3
 8000652:	2301      	movs	r3, #1
 8000654:	408b      	lsls	r3, r1
 8000656:	4619      	mov	r1, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	404a      	eors	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <GPIO_IRQInterruptConfig>:

// ####################################### Praktikum 3: IRQ ############################################################

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
	// Hinweis: Bedenken Sie welche ISER und ICER Register des Prozessors in dem verwendeten Mikrocontroller benutzt werden können.
	// Nicht alle Interrupts sind im Mikrocontroller aktiv. Überprüfen sie dazu das Handbuch (Reference Manual) des Mikrocontrollers.
	if(EnorDi == ENABLE)
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d120      	bne.n	80006c4 <GPIO_IRQInterruptConfig+0x58>
	{
		//ToDo: Programmieren der entsprechenden ISERx register
		if(IRQNumber >= IRQ_NO_EXTI0 && IRQNumber <= IRQ_NO_EXTI9_5){
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b05      	cmp	r3, #5
 8000686:	d90d      	bls.n	80006a4 <GPIO_IRQInterruptConfig+0x38>
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b17      	cmp	r3, #23
 800068c:	d80a      	bhi.n	80006a4 <GPIO_IRQInterruptConfig+0x38>
			*((volatile uint32_t*) NVIC_ISER0) |= (1 << IRQNumber);
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <GPIO_IRQInterruptConfig+0xa8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	2101      	movs	r1, #1
 8000696:	fa01 f202 	lsl.w	r2, r1, r2
 800069a:	4611      	mov	r1, r2
 800069c:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <GPIO_IRQInterruptConfig+0xa8>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e030      	b.n	8000706 <GPIO_IRQInterruptConfig+0x9a>
		}else if(IRQNumber == IRQ_NO_EXTI15_10){
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b28      	cmp	r3, #40	; 0x28
 80006a8:	d12d      	bne.n	8000706 <GPIO_IRQInterruptConfig+0x9a>
			*((volatile uint32_t*) NVIC_ISER1) |= (1 << (IRQNumber%32));
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <GPIO_IRQInterruptConfig+0xac>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	f002 021f 	and.w	r2, r2, #31
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <GPIO_IRQInterruptConfig+0xac>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
			*((volatile uint32_t*) NVIC_ICER0) |= (1 << IRQNumber);
		}else if(IRQNumber == IRQ_NO_EXTI15_10){
			*((volatile uint32_t*) NVIC_ICER1) |= (1 << (IRQNumber%32));
		}
	}
}
 80006c2:	e020      	b.n	8000706 <GPIO_IRQInterruptConfig+0x9a>
		if(IRQNumber >= IRQ_NO_EXTI1 && IRQNumber <= IRQ_NO_EXTI9_5){
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d90d      	bls.n	80006e6 <GPIO_IRQInterruptConfig+0x7a>
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b17      	cmp	r3, #23
 80006ce:	d80a      	bhi.n	80006e6 <GPIO_IRQInterruptConfig+0x7a>
			*((volatile uint32_t*) NVIC_ICER0) |= (1 << IRQNumber);
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <GPIO_IRQInterruptConfig+0xb0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	79fa      	ldrb	r2, [r7, #7]
 80006d6:	2101      	movs	r1, #1
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
 80006dc:	4611      	mov	r1, r2
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <GPIO_IRQInterruptConfig+0xb0>)
 80006e0:	430b      	orrs	r3, r1
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	e00f      	b.n	8000706 <GPIO_IRQInterruptConfig+0x9a>
		}else if(IRQNumber == IRQ_NO_EXTI15_10){
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b28      	cmp	r3, #40	; 0x28
 80006ea:	d10c      	bne.n	8000706 <GPIO_IRQInterruptConfig+0x9a>
			*((volatile uint32_t*) NVIC_ICER1) |= (1 << (IRQNumber%32));
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <GPIO_IRQInterruptConfig+0xb4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	f002 021f 	and.w	r2, r2, #31
 80006f6:	2101      	movs	r1, #1
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <GPIO_IRQInterruptConfig+0xb4>)
 8000700:	430b      	orrs	r3, r1
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	e7ff      	b.n	8000706 <GPIO_IRQInterruptConfig+0x9a>
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000e104 	.word	0xe000e104
 800071c:	e000e180 	.word	0xe000e180
 8000720:	e000e184 	.word	0xe000e184

08000724 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	// Abfrage und zurücksetzen des EXTI-PR bits
	if((EXTI->PR) & (ENABLE << PinNumber) != RESET){
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <GPIO_IRQHandling+0x48>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	2a00      	cmp	r2, #0
 800073c:	bf14      	ite	ne
 800073e:	2201      	movne	r2, #1
 8000740:	2200      	moveq	r2, #0
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	4013      	ands	r3, r2
 8000746:	2b00      	cmp	r3, #0
 8000748:	d009      	beq.n	800075e <GPIO_IRQHandling+0x3a>
		EXTI->PR |= ( 1 << PinNumber);
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <GPIO_IRQHandling+0x48>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <GPIO_IRQHandling+0x48>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6153      	str	r3, [r2, #20]
	}
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40013c00 	.word	0x40013c00

08000770 <EXTI0_IRQHandler>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

GPIO_Handle_t GpioLed;

void EXTI0_IRQHandler(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ffd5 	bl	8000724 <GPIO_IRQHandling>
  GPIO_ToggleOutputPin(&GpioLed);
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <EXTI0_IRQHandler+0x14>)
 800077c:	f7ff ff5f 	bl	800063e <GPIO_ToggleOutputPin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000001c 	.word	0x2000001c

08000788 <main>:

int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
  GPIO_Handle_t GPIOBtn;

  GpioLed.pGPIOx = GPIOD;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <main+0x60>)
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <main+0x64>)
 8000792:	601a      	str	r2, [r3, #0]
  GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <main+0x60>)
 8000796:	220c      	movs	r2, #12
 8000798:	711a      	strb	r2, [r3, #4]
  GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <main+0x60>)
 800079c:	2201      	movs	r2, #1
 800079e:	715a      	strb	r2, [r3, #5]
  GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <main+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	719a      	strb	r2, [r3, #6]
  GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <main+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	721a      	strb	r2, [r3, #8]
  GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <main+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	71da      	strb	r2, [r3, #7]

  GPIO_PeriClockControl(GPIOD, ENABLE);
 80007b2:	2101      	movs	r1, #1
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <main+0x64>)
 80007b6:	f7ff fd17 	bl	80001e8 <GPIO_PeriClockControl>

  GPIO_Init(&GpioLed);
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <main+0x60>)
 80007bc:	f7ff fdfc 	bl	80003b8 <GPIO_Init>


  GPIOBtn.pGPIOx = GPIOA;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <main+0x68>)
 80007c2:	607b      	str	r3, [r7, #4]
  GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	723b      	strb	r3, [r7, #8]
  GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80007c8:	2304      	movs	r3, #4
 80007ca:	727b      	strb	r3, [r7, #9]
  GPIO_Init(&GPIOBtn);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fdf2 	bl	80003b8 <GPIO_Init>

  GPIO_WriteToOutputPin(&GpioLed, GPIO_PIN_RESET);
 80007d4:	2100      	movs	r1, #0
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <main+0x60>)
 80007d8:	f7ff ff10 	bl	80005fc <GPIO_WriteToOutputPin>

  GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 80007dc:	2101      	movs	r1, #1
 80007de:	2006      	movs	r0, #6
 80007e0:	f7ff ff44 	bl	800066c <GPIO_IRQInterruptConfig>

  while(1);
 80007e4:	e7fe      	b.n	80007e4 <main+0x5c>
 80007e6:	bf00      	nop
 80007e8:	2000001c 	.word	0x2000001c
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40020000 	.word	0x40020000

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000822:	f000 f811 	bl	8000848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff ffaf 	bl	8000788 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000838:	080008b0 	.word	0x080008b0
  ldr r2, =_sbss
 800083c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000840:	20000028 	.word	0x20000028

08000844 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC_IRQHandler>
	...

08000848 <__libc_init_array>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4d0d      	ldr	r5, [pc, #52]	; (8000880 <__libc_init_array+0x38>)
 800084c:	4c0d      	ldr	r4, [pc, #52]	; (8000884 <__libc_init_array+0x3c>)
 800084e:	1b64      	subs	r4, r4, r5
 8000850:	10a4      	asrs	r4, r4, #2
 8000852:	2600      	movs	r6, #0
 8000854:	42a6      	cmp	r6, r4
 8000856:	d109      	bne.n	800086c <__libc_init_array+0x24>
 8000858:	4d0b      	ldr	r5, [pc, #44]	; (8000888 <__libc_init_array+0x40>)
 800085a:	4c0c      	ldr	r4, [pc, #48]	; (800088c <__libc_init_array+0x44>)
 800085c:	f000 f818 	bl	8000890 <_init>
 8000860:	1b64      	subs	r4, r4, r5
 8000862:	10a4      	asrs	r4, r4, #2
 8000864:	2600      	movs	r6, #0
 8000866:	42a6      	cmp	r6, r4
 8000868:	d105      	bne.n	8000876 <__libc_init_array+0x2e>
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000870:	4798      	blx	r3
 8000872:	3601      	adds	r6, #1
 8000874:	e7ee      	b.n	8000854 <__libc_init_array+0xc>
 8000876:	f855 3b04 	ldr.w	r3, [r5], #4
 800087a:	4798      	blx	r3
 800087c:	3601      	adds	r6, #1
 800087e:	e7f2      	b.n	8000866 <__libc_init_array+0x1e>
 8000880:	080008a8 	.word	0x080008a8
 8000884:	080008a8 	.word	0x080008a8
 8000888:	080008a8 	.word	0x080008a8
 800088c:	080008ac 	.word	0x080008ac

08000890 <_init>:
 8000890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000892:	bf00      	nop
 8000894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000896:	bc08      	pop	{r3}
 8000898:	469e      	mov	lr, r3
 800089a:	4770      	bx	lr

0800089c <_fini>:
 800089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089e:	bf00      	nop
 80008a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008a2:	bc08      	pop	{r3}
 80008a4:	469e      	mov	lr, r3
 80008a6:	4770      	bx	lr
