
Prak2_Treiber_felix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b20  08000b28  00010b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b20  08000b20  00010b28  2**0
                  CONTENTS
  4 .ARM          00000000  08000b20  08000b20  00010b28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b20  08000b28  00010b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b20  08000b20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b24  08000b24  00010b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b28  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b28  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000113f  00000000  00000000  00010b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000347  00000000  00000000  00011c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  000120a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c8e  00000000  00000000  00012138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dd7  00000000  00000000  00013dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000086a9  00000000  00000000  00014b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001d246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000268  00000000  00000000  0001d29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b08 	.word	0x08000b08

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b08 	.word	0x08000b08

080001e8 <GPIO_PeriClockControl>:
 */

#include "GPIO_Driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:

// Implementieren Sie die weiteren Schritte. Denken Sie daran die Einträge eines Registers zurückzusetzen, bevor Sie einzelne Bits setzen!
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	volatile uint32_t *tmpreg = 0x0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
	uint8_t pin = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	791b      	ldrb	r3, [r3, #4]
 80003c8:	74fb      	strb	r3, [r7, #19]

	//Anschalten der Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff09 	bl	80001e8 <GPIO_PeriClockControl>

	//Konfigurieren des PIN in INPUT oder OUTPUT-Modus
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	795b      	ldrb	r3, [r3, #5]
 80003da:	2b03      	cmp	r3, #3
 80003dc:	d86c      	bhi.n	80004b8 <GPIO_Init+0x100>
	{
		tmpreg = &(pGPIOHandle->pGPIOx->MODE_REG);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	617b      	str	r3, [r7, #20]
		uint8_t modus = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	74bb      	strb	r3, [r7, #18]
		if(modus == GPIO_MODE_IN)
 80003ea:	7cbb      	ldrb	r3, [r7, #18]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d117      	bne.n	8000420 <GPIO_Init+0x68>
		{
			BIT_CLEAR(*tmpreg, 2 * pin);
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	7cfa      	ldrb	r2, [r7, #19]
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	43d2      	mvns	r2, r2
 8000400:	401a      	ands	r2, r3
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	601a      	str	r2, [r3, #0]
			BIT_CLEAR(*tmpreg, 2 * pin + 1);
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	7cfa      	ldrb	r2, [r7, #19]
 800040c:	0052      	lsls	r2, r2, #1
 800040e:	3201      	adds	r2, #1
 8000410:	2101      	movs	r1, #1
 8000412:	fa01 f202 	lsl.w	r2, r1, r2
 8000416:	43d2      	mvns	r2, r2
 8000418:	401a      	ands	r2, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	e04b      	b.n	80004b8 <GPIO_Init+0x100>
		}else if (modus == GPIO_MODE_OUT)
 8000420:	7cbb      	ldrb	r3, [r7, #18]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d116      	bne.n	8000454 <GPIO_Init+0x9c>
		{
			BIT_SET(*tmpreg, 2 * pin);
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	7cfa      	ldrb	r2, [r7, #19]
 800042c:	0052      	lsls	r2, r2, #1
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	431a      	orrs	r2, r3
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	601a      	str	r2, [r3, #0]
			BIT_CLEAR(*tmpreg, 2 * pin + 1);
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	7cfa      	ldrb	r2, [r7, #19]
 8000440:	0052      	lsls	r2, r2, #1
 8000442:	3201      	adds	r2, #1
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	43d2      	mvns	r2, r2
 800044c:	401a      	ands	r2, r3
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	e031      	b.n	80004b8 <GPIO_Init+0x100>
		}else if (modus == GPIO_MODE_ALTFN)
 8000454:	7cbb      	ldrb	r3, [r7, #18]
 8000456:	2b02      	cmp	r3, #2
 8000458:	d116      	bne.n	8000488 <GPIO_Init+0xd0>
		{
			BIT_CLEAR(*tmpreg, 2 * pin);
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	7cfa      	ldrb	r2, [r7, #19]
 8000460:	0052      	lsls	r2, r2, #1
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	43d2      	mvns	r2, r2
 800046a:	401a      	ands	r2, r3
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	601a      	str	r2, [r3, #0]
			BIT_SET(*tmpreg, 2 * pin + 1);
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	7cfa      	ldrb	r2, [r7, #19]
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	3201      	adds	r2, #1
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	431a      	orrs	r2, r3
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	e017      	b.n	80004b8 <GPIO_Init+0x100>
		}else if (modus == GPIO_MODE_ANALOG)
 8000488:	7cbb      	ldrb	r3, [r7, #18]
 800048a:	2b03      	cmp	r3, #3
 800048c:	d114      	bne.n	80004b8 <GPIO_Init+0x100>
		{
			BIT_SET(*tmpreg, 2 * pin);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	7cfa      	ldrb	r2, [r7, #19]
 8000494:	0052      	lsls	r2, r2, #1
 8000496:	2101      	movs	r1, #1
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	431a      	orrs	r2, r3
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	601a      	str	r2, [r3, #0]
			BIT_SET(*tmpreg, 2 * pin + 1);
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	7cfa      	ldrb	r2, [r7, #19]
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	3201      	adds	r2, #1
 80004ac:	2101      	movs	r1, #1
 80004ae:	fa01 f202 	lsl.w	r2, r1, r2
 80004b2:	431a      	orrs	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	601a      	str	r2, [r3, #0]
	}

// ####################################### ENDE IRQ #####################################################################

	//Konfigurieren des Output-Speeds
	tmpreg = &(pGPIOHandle->pGPIOx->OUTPUT_SPEED);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	3308      	adds	r3, #8
 80004be:	617b      	str	r3, [r7, #20]
	uint8_t speed = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	799b      	ldrb	r3, [r3, #6]
 80004c4:	747b      	strb	r3, [r7, #17]
	if(speed == GPIO_SPEED_LOW)
 80004c6:	7c7b      	ldrb	r3, [r7, #17]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d117      	bne.n	80004fc <GPIO_Init+0x144>
	{
		BIT_CLEAR(*tmpreg, 2 * pin);
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	7cfa      	ldrb	r2, [r7, #19]
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	2101      	movs	r1, #1
 80004d6:	fa01 f202 	lsl.w	r2, r1, r2
 80004da:	43d2      	mvns	r2, r2
 80004dc:	401a      	ands	r2, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	601a      	str	r2, [r3, #0]
		BIT_CLEAR(*tmpreg, 2 * pin + 1);
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	7cfa      	ldrb	r2, [r7, #19]
 80004e8:	0052      	lsls	r2, r2, #1
 80004ea:	3201      	adds	r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	401a      	ands	r2, r3
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	e04b      	b.n	8000594 <GPIO_Init+0x1dc>
	}else if (speed == GPIO_SPEED_MEDIUM)
 80004fc:	7c7b      	ldrb	r3, [r7, #17]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d116      	bne.n	8000530 <GPIO_Init+0x178>
	{
		BIT_SET(*tmpreg, 2 * pin);
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	7cfa      	ldrb	r2, [r7, #19]
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	431a      	orrs	r2, r3
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	601a      	str	r2, [r3, #0]
		BIT_CLEAR(*tmpreg, 2 * pin + 1);
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	7cfa      	ldrb	r2, [r7, #19]
 800051c:	0052      	lsls	r2, r2, #1
 800051e:	3201      	adds	r2, #1
 8000520:	2101      	movs	r1, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	43d2      	mvns	r2, r2
 8000528:	401a      	ands	r2, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	e031      	b.n	8000594 <GPIO_Init+0x1dc>
	}else if (speed == GPIO_SPEED_HIGH)
 8000530:	7c7b      	ldrb	r3, [r7, #17]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d116      	bne.n	8000564 <GPIO_Init+0x1ac>
	{
		BIT_CLEAR(*tmpreg, 2 * pin);
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	7cfa      	ldrb	r2, [r7, #19]
 800053c:	0052      	lsls	r2, r2, #1
 800053e:	2101      	movs	r1, #1
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	43d2      	mvns	r2, r2
 8000546:	401a      	ands	r2, r3
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	601a      	str	r2, [r3, #0]
		BIT_SET(*tmpreg, 2 * pin + 1);
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	7cfa      	ldrb	r2, [r7, #19]
 8000552:	0052      	lsls	r2, r2, #1
 8000554:	3201      	adds	r2, #1
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	431a      	orrs	r2, r3
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	e017      	b.n	8000594 <GPIO_Init+0x1dc>
	}else if (speed == GPIO_SPEED_VERY_HIGH)
 8000564:	7c7b      	ldrb	r3, [r7, #17]
 8000566:	2b03      	cmp	r3, #3
 8000568:	d114      	bne.n	8000594 <GPIO_Init+0x1dc>
	{
		BIT_SET(*tmpreg, 2 * pin);
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	7cfa      	ldrb	r2, [r7, #19]
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	2101      	movs	r1, #1
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	431a      	orrs	r2, r3
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	601a      	str	r2, [r3, #0]
		BIT_SET(*tmpreg, 2 * pin + 1);
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	7cfa      	ldrb	r2, [r7, #19]
 8000584:	0052      	lsls	r2, r2, #1
 8000586:	3201      	adds	r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]
	}

	//Konfigurieren des Pull-up/down Settings
	tmpreg = &(pGPIOHandle->pGPIOx->PULL_UP_DOWN);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	330c      	adds	r3, #12
 800059a:	617b      	str	r3, [r7, #20]
	uint8_t pupd = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	743b      	strb	r3, [r7, #16]
	if(pupd == GPIO_NO_PUPD)
 80005a2:	7c3b      	ldrb	r3, [r7, #16]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d117      	bne.n	80005d8 <GPIO_Init+0x220>
	{
		BIT_CLEAR(*tmpreg, 2 * pin);
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	7cfa      	ldrb	r2, [r7, #19]
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	43d2      	mvns	r2, r2
 80005b8:	401a      	ands	r2, r3
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	601a      	str	r2, [r3, #0]
		BIT_CLEAR(*tmpreg, 2 * pin + 1);
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	7cfa      	ldrb	r2, [r7, #19]
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	3201      	adds	r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	fa01 f202 	lsl.w	r2, r1, r2
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	401a      	ands	r2, r3
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	e032      	b.n	800063e <GPIO_Init+0x286>
	}else if (pupd == GPIO_PIN_PU)
 80005d8:	7c3b      	ldrb	r3, [r7, #16]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d116      	bne.n	800060c <GPIO_Init+0x254>
	{
		BIT_SET(*tmpreg, 2 * pin);
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7cfa      	ldrb	r2, [r7, #19]
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	2101      	movs	r1, #1
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	431a      	orrs	r2, r3
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	601a      	str	r2, [r3, #0]
		BIT_CLEAR(*tmpreg, 2 * pin + 1);
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	7cfa      	ldrb	r2, [r7, #19]
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	3201      	adds	r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	43d2      	mvns	r2, r2
 8000604:	401a      	ands	r2, r3
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	e018      	b.n	800063e <GPIO_Init+0x286>
	}else if (pupd == GPIO_PIN_PD)
 800060c:	7c3b      	ldrb	r3, [r7, #16]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d115      	bne.n	800063e <GPIO_Init+0x286>
	{
		BIT_CLEAR(*tmpreg, 2 * pin);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7cfa      	ldrb	r2, [r7, #19]
 8000618:	0052      	lsls	r2, r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	fa01 f202 	lsl.w	r2, r1, r2
 8000620:	43d2      	mvns	r2, r2
 8000622:	401a      	ands	r2, r3
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	601a      	str	r2, [r3, #0]
		BIT_SET(*tmpreg, 2 * pin + 1);
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	7cfa      	ldrb	r2, [r7, #19]
 800062e:	0052      	lsls	r2, r2, #1
 8000630:	3201      	adds	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f202 	lsl.w	r2, r1, r2
 8000638:	431a      	orrs	r2, r3
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	601a      	str	r2, [r3, #0]
	}
	
	//Konfigurieren des Output modus
	tmpreg = &(pGPIOHandle->pGPIOx->OUTPUT_TYPE);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3304      	adds	r3, #4
 8000644:	617b      	str	r3, [r7, #20]
	uint8_t optype = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	73fb      	strb	r3, [r7, #15]
	if(optype == GPIO_OP_TYPE_PP)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10a      	bne.n	8000668 <GPIO_Init+0x2b0>
	{
		BIT_CLEAR(*tmpreg, pin);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	7cfa      	ldrb	r2, [r7, #19]
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	43d2      	mvns	r2, r2
 8000660:	401a      	ands	r2, r3
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	601a      	str	r2, [r3, #0]
	}else if (optype == GPIO_OP_TYPE_OD)
	{
		BIT_SET(*tmpreg, pin);
	}
}
 8000666:	e00b      	b.n	8000680 <GPIO_Init+0x2c8>
	}else if (optype == GPIO_OP_TYPE_OD)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d108      	bne.n	8000680 <GPIO_Init+0x2c8>
		BIT_SET(*tmpreg, pin);
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	7cfa      	ldrb	r2, [r7, #19]
 8000674:	2101      	movs	r1, #1
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	431a      	orrs	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <GPIO_WriteToOutputPin>:
{
	return pGPIOx->INPUT_DATA_REG;
}

void GPIO_WriteToOutputPin(GPIO_Handle_t *pGPIO_Handle, uint8_t Value)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	if(Value)
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00d      	beq.n	80006b6 <GPIO_WriteToOutputPin+0x2e>
	{
		BIT_SET(pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG, pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	4619      	mov	r1, r3
 80006a6:	2301      	movs	r3, #1
 80006a8:	408b      	lsls	r3, r1
 80006aa:	4619      	mov	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
	}else {
		BIT_CLEAR(pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG, pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
	}
}
 80006b4:	e00d      	b.n	80006d2 <GPIO_WriteToOutputPin+0x4a>
		BIT_CLEAR(pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG, pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2301      	movs	r3, #1
 80006c4:	408b      	lsls	r3, r1
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	400a      	ands	r2, r1
 80006d0:	615a      	str	r2, [r3, #20]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <GPIO_ToggleOutputPin>:
	pGPIOx->OUTPUT_DATA_REG = Value;
}


void GPIO_ToggleOutputPin(GPIO_Handle_t *pGPIO_Handle)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
	BIT_FLIP(pGPIO_Handle->pGPIOx->OUTPUT_DATA_REG, pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	4619      	mov	r1, r3
 80006f2:	2301      	movs	r3, #1
 80006f4:	408b      	lsls	r3, r1
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	404a      	eors	r2, r1
 80006fe:	615a      	str	r2, [r3, #20]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <delay5>:

void delay(void) {
	for (volatile uint32_t i = 0; i < 3400000; i++); //grob 3 Sekunden für Aufgabe 2.2
}

void delay5(void) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
	for (volatile uint32_t i = 0; i < 5700000; i++); //grob 5 Sekunden für Aufgabe 2.4
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	e002      	b.n	800071e <delay5+0x12>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3301      	adds	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <delay5+0x28>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d3f8      	bcc.n	8000718 <delay5+0xc>
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	0056f9a0 	.word	0x0056f9a0

08000738 <main>:


int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
	}*/

	//Aufgabe 2.4
	//Ampelschaltung
		GPIO_Handle_t gpio_leds[3];
		uint8_t RED=0, YELLOW=1, GREEN=2;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000744:	2301      	movs	r3, #1
 8000746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800074a:	2302      	movs	r3, #2
 800074c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		memset(gpio_leds, 0, 3 * sizeof(*gpio_leds));
 8000750:	463b      	mov	r3, r7
 8000752:	2224      	movs	r2, #36	; 0x24
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f9ce 	bl	8000af8 <memset>

		//LED-Konfiguration
		gpio_leds[RED].pGPIOx = GPIOD;
 800075c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000760:	4613      	mov	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800076c:	4413      	add	r3, r2
 800076e:	3b28      	subs	r3, #40	; 0x28
 8000770:	4ab9      	ldr	r2, [pc, #740]	; (8000a58 <main+0x320>)
 8000772:	601a      	str	r2, [r3, #0]
		gpio_leds[RED].GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000774:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000778:	4613      	mov	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	4413      	add	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000784:	4413      	add	r3, r2
 8000786:	3b24      	subs	r3, #36	; 0x24
 8000788:	2207      	movs	r2, #7
 800078a:	701a      	strb	r2, [r3, #0]
		gpio_leds[RED].GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800078c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800079c:	4413      	add	r3, r2
 800079e:	3b23      	subs	r3, #35	; 0x23
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
		gpio_leds[RED].GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80007a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007b4:	4413      	add	r3, r2
 80007b6:	3b22      	subs	r3, #34	; 0x22
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		gpio_leds[RED].GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007cc:	4413      	add	r3, r2
 80007ce:	3b20      	subs	r3, #32
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
		gpio_leds[RED].GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80007d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007e4:	4413      	add	r3, r2
 80007e6:	3b21      	subs	r3, #33	; 0x21
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&(gpio_leds[RED]));
 80007ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80007f0:	4639      	mov	r1, r7
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	440b      	add	r3, r1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fddb 	bl	80003b8 <GPIO_Init>

		gpio_leds[YELLOW].pGPIOx = GPIOD;
 8000802:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000812:	4413      	add	r3, r2
 8000814:	3b28      	subs	r3, #40	; 0x28
 8000816:	4a90      	ldr	r2, [pc, #576]	; (8000a58 <main+0x320>)
 8000818:	601a      	str	r2, [r3, #0]
		gpio_leds[YELLOW].GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 800081a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800082a:	4413      	add	r3, r2
 800082c:	3b24      	subs	r3, #36	; 0x24
 800082e:	2208      	movs	r2, #8
 8000830:	701a      	strb	r2, [r3, #0]
		gpio_leds[YELLOW].GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000832:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000842:	4413      	add	r3, r2
 8000844:	3b23      	subs	r3, #35	; 0x23
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
		gpio_leds[YELLOW].GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800084a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800085a:	4413      	add	r3, r2
 800085c:	3b22      	subs	r3, #34	; 0x22
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
		gpio_leds[YELLOW].GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000862:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000872:	4413      	add	r3, r2
 8000874:	3b20      	subs	r3, #32
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
		gpio_leds[YELLOW].GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800087a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800088a:	4413      	add	r3, r2
 800088c:	3b21      	subs	r3, #33	; 0x21
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&(gpio_leds[YELLOW]));
 8000892:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000896:	4639      	mov	r1, r7
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fd88 	bl	80003b8 <GPIO_Init>

		gpio_leds[GREEN].pGPIOx = GPIOD;
 80008a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008b8:	4413      	add	r3, r2
 80008ba:	3b28      	subs	r3, #40	; 0x28
 80008bc:	4a66      	ldr	r2, [pc, #408]	; (8000a58 <main+0x320>)
 80008be:	601a      	str	r2, [r3, #0]
		gpio_leds[GREEN].GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 80008c0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008d0:	4413      	add	r3, r2
 80008d2:	3b24      	subs	r3, #36	; 0x24
 80008d4:	2209      	movs	r2, #9
 80008d6:	701a      	strb	r2, [r3, #0]
		gpio_leds[GREEN].GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80008d8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008e8:	4413      	add	r3, r2
 80008ea:	3b23      	subs	r3, #35	; 0x23
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
		gpio_leds[GREEN].GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80008f0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000900:	4413      	add	r3, r2
 8000902:	3b22      	subs	r3, #34	; 0x22
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
		gpio_leds[GREEN].GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000908:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000918:	4413      	add	r3, r2
 800091a:	3b20      	subs	r3, #32
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
		gpio_leds[GREEN].GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000920:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000930:	4413      	add	r3, r2
 8000932:	3b21      	subs	r3, #33	; 0x21
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&(gpio_leds[GREEN]));
 8000938:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800093c:	4639      	mov	r1, r7
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fd35 	bl	80003b8 <GPIO_Init>

		GPIO_WriteToOutputPin(&(gpio_leds[RED]), GPIO_PIN_RESET);
 800094e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000952:	4639      	mov	r1, r7
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe91 	bl	8000688 <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(&(gpio_leds[YELLOW]), GPIO_PIN_RESET);
 8000966:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800096a:	4639      	mov	r1, r7
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fe85 	bl	8000688 <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(&(gpio_leds[GREEN]), GPIO_PIN_RESET);
 800097e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000982:	4639      	mov	r1, r7
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	440b      	add	r3, r1
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe79 	bl	8000688 <GPIO_WriteToOutputPin>

		// Loop forever
		for(;;)
		{
			GPIO_ToggleOutputPin(&(gpio_leds[RED])); //rot an
 8000996:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800099a:	4639      	mov	r1, r7
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe99 	bl	80006de <GPIO_ToggleOutputPin>
			delay5();
 80009ac:	f7ff feae 	bl	800070c <delay5>
			GPIO_ToggleOutputPin(&(gpio_leds[YELLOW])); //gelb an
 80009b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80009b4:	4639      	mov	r1, r7
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe8c 	bl	80006de <GPIO_ToggleOutputPin>
			delay5();
 80009c6:	f7ff fea1 	bl	800070c <delay5>
			GPIO_ToggleOutputPin(&(gpio_leds[RED])); //rot aus
 80009ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009ce:	4639      	mov	r1, r7
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	440b      	add	r3, r1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe7f 	bl	80006de <GPIO_ToggleOutputPin>
			GPIO_ToggleOutputPin(&(gpio_leds[YELLOW])); //gelb aus
 80009e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80009e4:	4639      	mov	r1, r7
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe74 	bl	80006de <GPIO_ToggleOutputPin>
			GPIO_ToggleOutputPin(&(gpio_leds[GREEN])); //grün an
 80009f6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80009fa:	4639      	mov	r1, r7
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	440b      	add	r3, r1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe69 	bl	80006de <GPIO_ToggleOutputPin>
			delay5();
 8000a0c:	f7ff fe7e 	bl	800070c <delay5>
			GPIO_ToggleOutputPin(&(gpio_leds[YELLOW])); //gelb an
 8000a10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000a14:	4639      	mov	r1, r7
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	440b      	add	r3, r1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fe5c 	bl	80006de <GPIO_ToggleOutputPin>
			GPIO_ToggleOutputPin(&(gpio_leds[GREEN])); //grün aus
 8000a26:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000a2a:	4639      	mov	r1, r7
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe51 	bl	80006de <GPIO_ToggleOutputPin>
			delay5();
 8000a3c:	f7ff fe66 	bl	800070c <delay5>
			GPIO_ToggleOutputPin(&(gpio_leds[YELLOW])); //gelb aus
 8000a40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000a44:	4639      	mov	r1, r7
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	440b      	add	r3, r1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe44 	bl	80006de <GPIO_ToggleOutputPin>
			GPIO_ToggleOutputPin(&(gpio_leds[RED])); //rot an
 8000a56:	e79e      	b.n	8000996 <main+0x25e>
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a60:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a8a:	f000 f811 	bl	8000ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fe53 	bl	8000738 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   r0, =_estack
 8000a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000aa0:	08000b28 	.word	0x08000b28
  ldr r2, =_sbss
 8000aa4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000aa8:	2000001c 	.word	0x2000001c

08000aac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <__libc_init_array>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	4d0d      	ldr	r5, [pc, #52]	; (8000ae8 <__libc_init_array+0x38>)
 8000ab4:	4c0d      	ldr	r4, [pc, #52]	; (8000aec <__libc_init_array+0x3c>)
 8000ab6:	1b64      	subs	r4, r4, r5
 8000ab8:	10a4      	asrs	r4, r4, #2
 8000aba:	2600      	movs	r6, #0
 8000abc:	42a6      	cmp	r6, r4
 8000abe:	d109      	bne.n	8000ad4 <__libc_init_array+0x24>
 8000ac0:	4d0b      	ldr	r5, [pc, #44]	; (8000af0 <__libc_init_array+0x40>)
 8000ac2:	4c0c      	ldr	r4, [pc, #48]	; (8000af4 <__libc_init_array+0x44>)
 8000ac4:	f000 f820 	bl	8000b08 <_init>
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	10a4      	asrs	r4, r4, #2
 8000acc:	2600      	movs	r6, #0
 8000ace:	42a6      	cmp	r6, r4
 8000ad0:	d105      	bne.n	8000ade <__libc_init_array+0x2e>
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad8:	4798      	blx	r3
 8000ada:	3601      	adds	r6, #1
 8000adc:	e7ee      	b.n	8000abc <__libc_init_array+0xc>
 8000ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae2:	4798      	blx	r3
 8000ae4:	3601      	adds	r6, #1
 8000ae6:	e7f2      	b.n	8000ace <__libc_init_array+0x1e>
 8000ae8:	08000b20 	.word	0x08000b20
 8000aec:	08000b20 	.word	0x08000b20
 8000af0:	08000b20 	.word	0x08000b20
 8000af4:	08000b24 	.word	0x08000b24

08000af8 <memset>:
 8000af8:	4402      	add	r2, r0
 8000afa:	4603      	mov	r3, r0
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d100      	bne.n	8000b02 <memset+0xa>
 8000b00:	4770      	bx	lr
 8000b02:	f803 1b01 	strb.w	r1, [r3], #1
 8000b06:	e7f9      	b.n	8000afc <memset+0x4>

08000b08 <_init>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	bf00      	nop
 8000b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0e:	bc08      	pop	{r3}
 8000b10:	469e      	mov	lr, r3
 8000b12:	4770      	bx	lr

08000b14 <_fini>:
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	bf00      	nop
 8000b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1a:	bc08      	pop	{r3}
 8000b1c:	469e      	mov	lr, r3
 8000b1e:	4770      	bx	lr
